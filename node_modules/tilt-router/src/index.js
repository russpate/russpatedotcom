'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _pathToRegexp = require('path-to-regexp');

var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = require('debug')('tilt-router');

var Router = function () {
  _createClass(Router, [{
    key: 'routes',
    get: function get() {
      return {};
    }
  }, {
    key: 'verbs',
    get: function get() {
      return ['GET', 'POST', 'PUT', 'HEAD', 'OPTION', 'DELETE'];
    }
  }]);

  function Router(app) {
    var _this = this;

    _classCallCheck(this, Router);

    this.app = app;
    this._routes = [];

    if (!this.app) {
      this.app = _http2.default.createServer(this.dispatch.bind(this));
    }

    if (this.app instanceof _http2.default.Server) {
      this.verbs.forEach(function (verb) {
        verb = verb.toLowerCase();
        _this.app[verb] = _this.action(verb);
      });
    }

    this.registerRoutes();
  }

  _createClass(Router, [{
    key: 'action',
    value: function action(verb) {
      var _this2 = this;

      return function (pattern, handler) {
        debug('Register %s %s', verb.toUpperCase(), pattern);
        _this2._routes.push({
          verb: verb,
          path: pattern,
          handler: handler
        });
      };
    }
  }, {
    key: 'registerRoutes',
    value: function registerRoutes() {
      var _this3 = this;

      var routes = this.routes;

      Object.keys(routes).forEach(function (path) {
        var method = routes[path];
        var parts = path.split(' ');
        var verb = parts.length > 1 ? parts[0] : 'get';
        verb = verb.toLowerCase();
        path = parts.length > 1 ? parts[1] : path;

        if (typeof _this3.app.connection === 'function') {
          // Hapi like server, use Hapi API
          debug('Register %s (%s)', verb.toUpperCase(), path);
          _this3.app.route({
            method: verb.toUpperCase(),
            path: path,
            handler: _this3[method].bind(_this3)
          });
        } else {
          _this3.app[verb](path, _this3[method].bind(_this3));
        }
      });
    }
  }, {
    key: 'listen',
    value: function listen(port, done) {
      if (!this.app) throw new Error('Missing app property');
      return this.app.listen(port, done);
    }
  }, {
    key: 'dispatch',
    value: function dispatch(req, res, next) {
      // console.log(this.app);
      // express app, nothing to do
      if (this.app._router) return next();

      // figure out which route to invoke based on url
      var pattern = (0, _pathToRegexp2.default)(req.url);
      var route = this._routes.find(function (route) {
        return req.method.toLowerCase() === route.verb && pattern.test(route.path);
      });

      if (!route) {
        debug('No route found', this._routes);
        res.statusCode = 404;
        if (next) return next(new Error('No route found'));else if (res.end) return res.end('No route found');else throw new Error('No route found');
      }

      route.handler.apply(this, arguments);
    }
  }, {
    key: 'address',
    value: function address() {
      return this.app.address();
    }
  }], [{
    key: 'create',
    value: function create(app, options) {
      if (!options) {
        options = app || {};
        app = options.app;
      }

      return new Router(app, options);
    }
  }, {
    key: 'middleware',
    value: function middleware(app, options) {
      var router = Router.create(app, options);
      return router.dispatch.bind(router);
    }
  }, {
    key: 'createServer',
    value: function createServer(listener) {
      return _http2.default.createServer(listener);
    }
  }, {
    key: 'listen',
    value: function listen(listener, port, done) {
      if (!done) {
        if (port) {
          done = port;
          port = listener;
          listener = Router.middleware();
        } else {
          port = listener;
          done = null;
          listener = Router.middleware();
        }
      }

      debug('Listen on http://localhost:%s', port);
      return Router.createServer(listener).listen(port, done);
    }
  }]);

  return Router;
}();

exports.default = Router;
module.exports = exports['default'];